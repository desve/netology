# -*- coding: utf-8 -*-


def input_id():
    """ Вводим id пользователя """
    while True:
        try:
            user_id = int(input('Please enter a number: '))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again...")
    return user_id


def id_followers(USER_ID):
    """Находим ID всех подписчиков пользователя """

    import vk

    print('Находим подписчиков пользователя id=', USER_ID)

    offset = 0
    COUNT = 1000
    all_followers = []
    session = vk.Session()
    api = vk.API(session)
    followers = api.users.getFollowers(user_id=USER_ID)['count']
    while True:
        print('Обработвно записей {0} из {1} - {2} %'.format(offset, followers, round((offset/followers)*100, 2)))
        response = api.users.getFollowers(user_id=USER_ID, offset=offset, count=COUNT)
        all_followers += response['items']
        offset += COUNT
        if offset > response['count']:
            break
    print('Всего {0} подписчиков'.format(len(all_followers)))

    return all_followers


def followers_groups(ACCESS_TOKEN, VERSION, all_followers):
    """ Получаем словарь подписчиков и их груп.
    В формате {'id подписчика': [id его группы]} """

    import time
    import vk

    print('Получаем словарь подписчиков и их груп')

    session = vk.Session(access_token=ACCESS_TOKEN)
    api = vk.API(session, v=VERSION, lang='ru', timeout=10)
    followers_and_groups = {}
    for serial_number, user_id in enumerate(all_followers):
        print('Обрабатываем пользователя # {0} id = {1} из {2} - {3} %'.format(serial_number + 1, user_id,
                len(all_followers), round((serial_number + 1)/len(all_followers)) * 100, 2))
        offset = 0
        COUNT = 1000
        groups = []
        while True:
            number_groups = api.groups.get(user_id=user_id)['count']
            print('Обработвно записей {0} из {1}'.format(offset, number_groups))
            response = api.groups.get(user_id=user_id, offset=offset, count=COUNT)
            groups += response['items']
            offset += COUNT
            time.sleep(1)    # задержка 1 сек
            if offset > response['count']:
                break
        print('Пользователь # {0} id = {1} подписан на {2} груп(ы)'.format(serial_number + 1, user_id, len(groups)))
        followers_and_groups[user_id] = groups

    return followers_and_groups


def top_groups(followers_and_groups):
    """ Получаем список ТОР-100 групп.
        В формате : ['title': 'название', 'coutn': 'число подписчиков'], 
        [(id группы, количество подптсок на группу)] """

    import collections

    # Находим общую базу всех груп (с учетом повторений)
    TOP = 100
    all_groups = []
    for user_id in followers_and_groups:
        for group in followers_and_groups[user_id]:
            all_groups.append(group)

    # Находим ТОР груп
    top_100_id = collections.Counter(all_groups).most_common(TOP)

    # Преобразуем в требуемый формат
    top_100_name = []
    session = vk.Session()
    api = vk.API(session)
    for serial_number, group in enumerate(top_100_id):
        # Получаем имя группы по id
        group_id = group[0]
        print('Группа {0} из TOP-100 - group_id= {1} обработана'.format(serial_number + 1, group_id))
        response = api.groups.getById(group_id=group_id)
        name_group = response[0]['name']
        group_info = {'title': name_group, 'count': group[1]}
        top_100_name.append(group_info)

    return top_100_name, top_100_id


def save_to_json(file_name, info):
    """ Записываем результат в json """
    import simplejson as json
    info_json = json.dumps(info, sort_keys=False, indent=4, ensure_ascii=False, encoding='utf8')
    with open(file_name, 'w') as file:
        file.write(info_json)


def male_or_female(users_info):
    """ Нахоим количество мужчин и женщин """
    male = 0
    female = 0
    any = 0
    for serial_number, user in enumerate(users_info):
        if user['sex'] == 1:
            female += 1
        elif user['sex'] == 2:
            male += 1
        elif user['sex'] == 0:
            any += 1
    return male, female, any


def age(age_segments, users_info):
    """ Находим возраст участников """

    # Ноходим число сегментов
    number_segments = len(age_segments)
    # Создаем пустой список
    age_segments_groups = []
    for segments in range(number_segments + 2):
        segments = 0
        age_segments_groups.append(segments)

    # Находим распределение по возрасту
    for user in users_info:

        # Проверяем наличие поля 'день рождения'
        try:
            # Проверяем наличие поля 'bdate'
            user['bdate']
            if user['bdate'].count('.') == 1:  # проверяем формат 'xx.xx'
                age_segments_groups[number_segments] += 1
            else:
                user_year = user['bdate'][-4:]  # если формат 'xx.xx.xxxx'
                user_age = 2017 - int(user_year)

                if user_age >= age_segments[number_segments - 1]:
                    age_segments_groups[number_segments - 1] += 1
                else:
                    for age in range(number_segments - 1):
                        if user_age > age_segments[age] and user_age < age_segments[age+1]:
                            age_segments_groups[age] += 1

        except KeyError:
            # Если полу 'bdate' отсутствует
            age_segments_groups[number_segments + 1] += 1

    return age_segments_groups


def sex_and_age(top_100_name, top_100_id):
    """ Находим распреление по возрасту и полу """

    # Выбираем Top-5 групп
    TOP = 5
    print('Находим распреление по возрасту и полу')
    groups_sex = []
    groups_age = []
    session = vk.Session()
    api = vk.API(session, v=VERSION, lang='ru', timeout=10)
    for group in range(TOP):
        # id группы
        group_id = str(top_100_id[group][0])
        print('Обрабатываем группу {0} из {1} - {2}'.format(group + 1, TOP, top_100_name[group]['title']))

        offset = 0
        COUNT = 1000
        users_info = []
        while True:
            group_count = api.groups.getMembers(group_id=group_id)['count']
            print('Обработвно записей {0} из {1} - {2} %'.format(offset, group_count,
                                                                 round((offset/group_count) * 100, 2)))
            response = api.groups.getMembers(group_id=group_id, offset=offset, count=COUNT, fields='sex, bdate')
            users_info += response['users']
            offset += COUNT
            if offset > response['count']:
                break
        print('Всего обработано {0} пользователей из {1}'.format(len(users_info),
                                                                 api.groups.getMembers(group_id=group_id)['count']))

        # Определяем пол
        male, female, any = male_or_female(users_info)

        # Определяем возраст
        # Задаем возрастной диапазон
        age_segments = [10, 16, 21, 31, 41, 81]
        age_segments_groups = age(age_segments, users_info)

        # Записываем пол
        # Результат записываем в список в формате
        # [{'title'; 'Название группы', 'male': кол-во женщин, 'female': кол-во мужчин, 'any': любой пол}]
        group_sex = {'title': top_100_name[group]['title'], 'female': female, 'male': male, 'any': any}
        # Добавляем в список
        groups_sex.append(group_sex)

        # Записываем возраст
        # Результат записываем в список в формате
        # {'title': 'Название группы', 'интервал' : возраст}
        group_age = {'title': top_100_name[group]['title'], '10_15': age_segments_groups[0],
                     '16_20': age_segments_groups[1], '21_39': age_segments_groups[2],
                     '31_40': age_segments_groups[3], '41_80': age_segments_groups[4],
                     '81_older': age_segments_groups[5], 'год отсутствует': age_segments_groups[6],
                     'поле отсутствует': age_segments_groups[7]}
        # Добавляем в список
        groups_age.append(group_age)

    return groups_sex, groups_age


import vk    # Все методы https://vk.com/dev/methods

ACCESS_TOKEN = 'eff875cd749c42fe9ced8691a012d1aa6068fe954c91f51917dfb148842db0cc0a9e63516e6a95dde63d9'
VERSION = 5.60

USER_ID = 32707600    # Ольга Бузова
# USER_ID = 219893150
# Вводим id пользователя
# user_id = input_id()

# Находим ID всех подписчиков пользователя
all_followers = id_followers(USER_ID)

# Получаем словарь подписчиков и их груп. В формате {'id подписчика': [id его груп]}
followers_and_groups = followers_groups(ACCESS_TOKEN, VERSION, all_followers)
# followers_and_groups= {151646144: [1350385, 49580563, 8332024, 134153832, 80815034, 58147943, 59003335, 743511, 107716237, 44732895, 1701218, 119266931, 69534812, 39172421, 112336345, 21928144, 75398548, 111136605, 120000977, 99508667, 125510653, 66483563, 78163128, 84923543, 31111644, 92475597, 1613259, 77006723, 101974271, 97721889, 106495674, 133228786, 137263949, 115687079, 137736847, 125807748, 136138398, 52850158, 115592262, 109155065, 108206947, 143985387, 130194211, 116687369, 85183947, 128971028, 115420444, 100034651, 51914633, 123462952, 111517195, 113696128, 136031373, 72450146, 111468230, 111525054, 108363793, 143521398, 120108198, 118148649, 45061798, 46395742], 224370625: [], 16291039: [32439535, 68229174, 43772432, 26307864, 20249656, 90730773, 137793489, 37684434, 5880263, 26956082, 34451036, 48911100, 107019848, 35486195, 38379853, 36184135, 49235752, 12818778, 66362370, 18464856, 126100569, 35113021, 49684431, 36008740, 48618580, 128645377, 52729613, 40335272, 83935640, 86224065, 41002749, 34889014, 86514133, 23170931, 28556858, 30638367, 33080201, 33390434, 33706382, 34199707, 34483558, 34528799, 35318914, 35687306, 39165933, 39513007, 40167434, 40378811, 42666155, 44711082, 46298598, 47472023, 49760701, 49840023, 57526182, 58239196, 61575493, 63731512, 64588109, 70737879, 75372069, 75550743, 77109534, 81352731, 92209363, 97218624, 100412010, 105040289, 115111065, 115608422, 126100393, 138641199], 158482164: [23064236, 56106344, 43879004, 40498005, 36164349, 39728801, 45064245, 25554967, 28627911, 23830580, 30318830, 26030283, 23245066, 34215577, 12648877, 36085261, 11614, 39153701, 56048543, 23337480, 47118092, 23164653, 27470044, 34308709, 27237360, 23378353, 32651025, 33339790, 32231484, 24722253, 24985591, 126100569, 31189947, 31746, 83815413, 31872836, 35930308, 35963611, 126100393, 34166518, 28423507, 28771266, 49609643, 73730654, 41154660, 26090596, 64173570, 42564857, 30823579, 30654607, 33382046, 50624911, 24230705, 28308494, 14947155, 39490575, 25251165, 56905360, 34856994, 55122354, 34569738, 34677924, 29038248, 27042171, 3807937, 31935896, 36166439, 33152388, 30431255, 54301613, 51362846, 42696471, 26013405, 33376541, 32142165, 80483798, 42871782, 29908786, 41488762, 37862023, 23485910, 55378503, 32494444, 27842893, 59227775, 26769923, 39939573, 30320490, 53197574, 39108688, 32657308, 3252, 38465826, 27864335, 28759183, 25682096, 29667762, 25379190, 30104591, 58627667, 19186139, 40062539, 31470564, 41654074, 27559875, 31483119, 71608673, 65113938, 95971513, 55010617, 37923980, 47736828, 36294584, 27283935, 39080208, 34064557, 41004029, 105930926, 34215573, 34528742, 94767915, 41051941, 123138388, 25320619, 19286732, 97827608, 27963519, 29158042, 59559839, 32836152, 39545381, 40726020, 12770770, 35578706, 42070824, 40378148, 79611951, 55660339, 111970006, 80673988, 64054174, 32951726, 21513303, 54365575, 40377996, 54365565, 38226599, 131278994, 30384400, 7718487, 3709560, 17941952, 23974839, 52309242, 30888140, 55955939, 40683556, 134316325, 95199483, 37812553, 65991762, 1503112, 13331706, 13276458, 119704283, 32219162, 36711579, 44037352, 26359588, 80396029, 31129776, 39606365, 68942366, 22296002, 30105121, 70855695, 15903949, 68852328, 18744508, 11863416, 94164980, 71478050, 30640838, 25257286, 110043581, 43773395, 116696394, 37774200, 7892981, 38116583, 35649219, 128639956, 40491593, 39544014, 46001678, 8472302, 105627533, 21839730, 36296047, 39692291, 17417429, 34726799, 20661141, 53141792, 40399856, 130792259, 115143932, 108008036, 54585931, 115916208, 41311349, 37017980, 453365, 86543637, 39525848, 43449798, 126765816, 22850674, 104165039, 73557013, 100200772, 33432201, 53692421, 40832221, 28740485, 37697291, 38633336, 71356903, 47723787, 34428515, 89750221, 43662690, 68781281, 58373219, 122341577, 40595049, 73359010, 41201583, 39677738, 47842124, 41851037, 26643089, 57139968, 15808383, 85078904, 93727011, 44048536, 130956374, 129291407, 35573917, 15429398, 31800946, 66727041, 98923170, 37918405, 32815648, 139101738, 43940671, 64376415, 26885318, 36281196, 93467411, 23794579, 70307678, 3345013, 87829577, 47456160, 50745100, 42769787, 20074368, 22521359, 33829870, 23950109, 21545599, 31566333, 30186720, 60243151, 27215814, 46537042, 124306880, 57167974, 60836524, 66701545, 119967136, 34821259, 64638014, 6306944, 77672114, 51202414, 109085507, 38393255, 15925376, 122768408, 56296260, 51225462, 44722696, 74089954, 60152687, 61120098, 42218295, 63457425, 49251693, 33084612, 102585762, 36673425, 34358069, 100994837, 36107020, 111885959, 113094543, 103049417, 41685363, 124681566, 105929182, 35796164, 109251968, 42724467, 110364319, 46104548, 45501727, 61973361, 43184146, 103049411, 87619200, 22134069, 128416204, 35921386, 105601346, 110421547, 34716986, 33659802, 110021975, 105315906, 51048055, 137790602, 40334192, 33019166, 32766235, 102906771, 117037969, 122939182, 69384599, 66500046, 56719304, 34832404, 49573874, 43219748, 51945185, 128040473, 115681109, 35100252], 237813231: [53845179, 62120288, 53520258, 72199240, 52620170, 67083068, 32041317, 59570153, 50475393, 78176908, 889472, 73804972, 70177986, 22822305], 323033220: [120988588, 90606522, 135869004, 128696771, 46987089, 52405783, 127442527, 139663476, 41035449, 126341333, 143839056, 64069342, 39790038, 106666834, 122503582, 40593994, 125301333, 67779459, 142411993, 78469800, 98252449, 36601594, 99487193, 78666822, 132348038, 113372168, 39801273, 138163406, 32255006, 54896924, 132407900, 104563388, 22669267, 58858984, 96998450, 123776484, 68539023, 68650314, 137018878, 51651178, 27390418, 74538155, 136659382, 137933227, 105999460, 43256857, 39153701, 119654438, 120018864, 124089832, 460389, 4323804, 7425735, 7669591, 7736865, 9693056, 12382740, 13380862, 14947155, 15142329, 15326149, 16054118, 20753458, 21082539, 22741624, 22822305, 22866546, 23065273, 23110910, 23178942, 23243883, 23471538, 23586388, 23758942, 23927116, 24099488, 24199209, 24359499, 24608732, 24713873, 24723735, 25089415, 25094499, 25171514, 25251165, 25379190, 25449286, 25554967, 25713641, 25757367, 26015443, 26211015, 26397351, 26419239, 26492122, 26614831, 26669118, 26833713, 27000252, 27113199, 27378018, 27460671, 27470044, 27537312, 27880348, 27895931, 28108891, 28151829, 28210851, 28261265, 28423507, 28627911, 28646177, 28771266, 28901219, 28956110, 29005320, 29078047, 29156611, 29258893, 29396733, 29508242, 29689780, 29963483, 30358840, 30490486, 30532220, 30597540, 31057217, 31071893, 31273955, 31341557, 31466113, 31613023, 31713884, 31836774, 31916762, 31935896, 31976441, 32127188, 32194500, 32262071, 32666191, 32796946, 32887633, 32922940, 32936794, 33339790, 33414947, 33602339, 33644901, 33924519, 34001496, 34019713, 34166518, 34351337, 34378420, 34378493, 34433605, 34479639, 34491673, 34611196, 34626497, 34689843, 34757875, 34856994, 34981365, 34996665, 35026736, 35075445, 35132296, 35179056, 35762179, 35822397, 35930308, 35979047, 35983383, 36085261, 36092580, 36164349, 36318299, 36941068, 37753791, 37924394, 38385763, 39098868, 39104553, 39236729, 39280341, 39363387, 39399586, 39410028, 39444069, 39675367, 39728801, 39822792, 39924694, 40187253, 40567146, 40724070, 40725156, 40894239, 40901026, 41108497, 41135102, 41330561, 41404649, 41520304, 41611636, 41908820, 42134719, 42186158, 42291448, 42360925, 42440233, 42767316, 43171496, 43498930, 43535132, 43542609, 43767374, 43776215, 44020269, 44232142, 44236056, 44263705, 44412943, 44628203, 44881947, 45023794, 45037855, 45064245, 45564175, 45893469, 46213899, 46400154, 46509740, 46547947, 46855773, 46948614, 47551578, 47610608, 47826135, 47828212, 48394010, 48617761, 48724330, 48911100, 49056314, 49591829, 49603755, 49609643, 49744260, 50092037, 50215320, 50291394, 50340218, 50406378, 50659999, 50671389, 50716198, 50757669, 51059866, 51888238, 51897826, 52203443, 52537634, 53178542, 54318581, 54500021, 54598940, 54724517, 55020149, 55026665, 55156099, 55662720, 55796135, 56824184, 56985757, 57264269, 57846937, 58170807, 59961158, 60105905, 60774159, 60801114, 60844127, 61050845, 61052294, 61724119, 63012307, 63070868, 63857740, 63863029, 64132808, 64534716, 64554902, 64585100, 64664232, 66097766, 66494675, 67375000, 69671264, 69753110, 70024358, 70086897, 70365191, 72113658, 73419228, 73712316, 74006511, 75149440, 75958230, 77843142, 77963997, 78657170, 79223777, 79788398, 81942094, 82205615, 83585726, 83709641, 83815413, 84843298, 85620209, 86003447, 86422559, 88158173, 88572253, 89358267, 89806750, 90498437, 91050183, 91099909, 91166591, 91219016, 91569182, 94164900, 95102435, 95126708, 95154338, 95348970, 96794207, 97601902, 97630666, 97660505, 98075100, 98085796, 98249537, 98788033, 98903853, 99464023, 100358986, 101695922, 102090470, 102168352, 102585210, 102636214, 103197983, 104551563, 104613976, 106460709, 108370333, 109351471, 109784099, 110494375, 111052261, 111181109, 111499611, 111837462, 112124472, 112570854, 112581363, 112712330, 112809839, 113104030, 114273150, 114801291, 115044235, 116021119, 116703587, 117624440, 118562984, 118859260, 119061452, 119111441, 119623345, 120211936, 120273285, 120299003, 120577724, 121199691, 121499640, 121559222, 121798163, 122071399, 122817318, 123018013, 123104346, 123288548, 124319704, 124365370, 124828314, 125438054, 126100310, 126100569, 126719253, 126827395, 126926640, 127012432, 127217221, 127374931, 127419568, 127664523, 127688108, 127760598, 128249800, 128350290, 128513754, 128572652, 128775608, 129359360, 129410007, 129584070, 129772452, 129812336, 129936276, 130133147, 130271299, 130998149, 132029950, 132327349, 133937702, 135226622, 135395955, 135660309, 135856720, 135951495, 136304182, 136567405, 137548045, 137548133, 137613971, 138126898, 138205839, 138243724, 138415718, 138484752, 138537007, 138586391, 139670117, 139775387, 139869509, 140300401, 140832734, 142546676], 263315449: [34757875, 28646177, 76314525, 71239327, 35486195, 36959676, 49592543, 28938560, 1792796, 49290489, 29599237, 51760575, 27834831, 96106310, 23118019, 126205007, 85199833, 41190551, 59447295, 107611000, 133811705, 51187465, 129029201, 28589050, 89954998, 36121192, 76005390, 60296264, 28370655, 34983851, 128575209, 40673982, 59598959, 28757749, 63092331, 71762424, 22664663, 64106630, 61240196, 129276391, 18688630, 96140318], 99951361: [107019848, 125770269, 23433159, 32077955, 105510809, 126100569, 63361902, 139568400, 128350290, 59490170, 90552903, 133995079, 126476973, 142576384, 127535578, 115978679], 270902323: [24507410, 112097022, 33755823, 135519333, 131279079, 131267293, 23385099, 32966422, 90253744, 44458761, 83502136, 110625802, 32253087, 27790545, 52648535, 54842529, 24581636], 388006866: [], 422407880: [83857986, 93535657, 90199205, 90163954, 90213012, 72284804], 416585052: [26127512, 68229174, 51512485, 70841494, 12648877, 32728983, 64980863, 61705609, 62067277], 301333864: [9698113, 19505713, 22822305, 23065273, 23783750, 26419239, 26720879, 27323643, 27652670, 27653829, 27680436, 28016073, 29103840, 30487105, 30807508, 32164903, 32194500, 33346807, 33444385, 33858187, 34001496, 34491673, 34891421, 35145657, 35783559, 36508616, 36614147, 37169648, 37448911, 38894284, 39207500, 39236729, 39340999, 39513007, 39822792, 40926256, 41437811, 41771733, 41878150, 41891726, 41922026, 42701798, 44194002, 44305467, 44758045, 45045130, 45441631, 45595714, 46036289, 46642148, 47249455, 48333362, 48875065, 49113114, 49752197, 50473615, 50685232, 50882173, 52170036, 54072336, 54154078, 54500021, 54693522, 56211685, 56951313, 56974106, 57641892, 58798248, 59086790, 59371017, 60203425, 60532209, 61115800, 61723942, 62682724, 63001164, 63758929, 64701856, 64715327, 65320054, 65520825, 66678575, 67119168, 67320347, 68471405, 68506252, 69590235, 70570762, 71729358, 71731284, 72009603, 73028359, 73150013, 74297965, 74931559, 75149440, 75338949, 75338985, 75667916, 75686365, 76611297, 76636675, 76709587, 77051305, 77051728, 77318368, 77622643, 80260851, 81226963, 82143067, 82174733, 83729091, 84429227, 84752433, 84951819, 85511770, 86131661, 86747483, 87292497, 88149968, 88555205, 90060110, 90206638, 90769372, 91338898, 92211859, 92873308, 95083989, 95128240, 95564176, 95885288, 96591129, 96603157, 96931043, 97668990, 97758272, 98075100, 98249537, 98343939, 100164057, 102251259, 102313005, 102636214, 102801403, 103083994, 103542090, 103613346, 104331145, 104434363, 104446131, 104866704, 105041733, 105639681, 105694344, 106085953, 106220834, 106249908, 106418011, 106419960, 107007688, 107714566, 108204927, 108434317, 109256308, 109264998, 109435972, 109773749, 109915908, 110327646, 110745236, 111246002, 111499357, 111604199, 112128054, 112216442, 112549570, 113372168, 115135377, 115246447, 115686740, 116779618, 116887644, 116972672, 117146481, 117269726, 117381362, 117588739, 117728599, 120049558, 120462236, 121232852, 121367291, 121411271, 122186052, 122212450, 122503582, 122623791, 123393006, 123999669, 124260407, 124484592, 124618964, 125011531, 125046107, 125376037, 126544003, 126627530, 126827395, 127229831, 127428134, 127544962, 127703902, 128116331, 128532803, 128995874, 129277123, 129296100, 129585358, 129659472, 129676985, 129727930, 129728377, 130001074, 130187704, 130501943, 130521968, 130842685, 131361889, 131552011, 131568644, 131890922, 131893815, 133258045, 133572491, 133585789, 133668394, 134168895, 134357098, 135678321, 135926786, 136546883, 136958443, 137044268, 137170810, 137331434, 137472899, 137648145, 137975197, 138084281, 138444529, 138458414, 138547944, 138785361, 139063106, 139112348, 139186775, 139489054, 139581413, 139651357, 139903965, 140146748, 140304999, 141368992, 141453699, 141923752, 141964784]}

# Составляем список всех груп
top_100_name, top_100_id = top_groups(followers_and_groups)

# Записываем результат в json
save_to_json('top_100_name.json', top_100_name)

# Находим распреление по возрасту и полу
groups_sex, groups_age = sex_and_age(top_100_name, top_100_id)

# Записываем результат в json
save_to_json('groups_sex.json', groups_sex)
save_to_json('groups_age.json', groups_age)

